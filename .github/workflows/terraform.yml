name: Terraform Deployment

on:
  push:
    branches:
      - dev
      - main
      - feature/*
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
      tf-folder:
        description: 'speocific folder to deploy. use in chicken/egg scenarios'
        required: true
        default: ''
      destroy:
        description: 'destroy'
        type: 'boolean'
        required: false
        default: false
      migrate-state:
        description: 'migrate state file during init'
        type: 'boolean'
        required: false
        default: false

jobs:
  terraform:
    environment: Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'  # Optional, for clarity

    env:
      TF_VERSION: 1.12.2
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

          
      - name: Initialize and apply Terraform in multiple folders
        run: |
          # TF Lint
          terraform fmt -recursive
          terraform fmt -recursive -check
          # Define your folders, e.g., "infra/network" and "infra/apps"
          TERRAFORM_FOLDERS=(
            "terraform-ecr"
            "terraform-ecs"
            # add more folders as needed
          )
          if ! [ -n "${{ github.event.inputs.tf-folder }}" ]; then
              TERRAFORM_FOLDERS=(
                "${{ github.event.inputs.tf-folder }}"
              )
          fi
          echo "{TERRAFORM_FOLDERS[@]}"

          for folder in "${TERRAFORM_FOLDERS[@]}"; do
            echo "Processing folder: $folder"

            cd "$folder"

            # Initialize Terraform
            MIGRATE=''
            if [ "${{ github.event.inputs.migrate-state }}" == "true" ]; then
              MIGRATE='-migrate-state'
            fi
            terraform init -input=false $MIGRATE

            # Plan to review before apply (optional)
            terraform plan -out=tfplan -input=false
            
            # If on main branch, run apply, else just validate
            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              # Apply only if on main
              terraform apply -input=false -auto-approve tfplan
            fi
            if [ "${{ github.event.inputs.destroy }}" == "true" ]; then
              terraform destroy -auto-approve
            fi
            
            cd -  # Return to root
          done
