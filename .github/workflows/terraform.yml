name: Terraform Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
      build_image:
        description: 'build docker image on manual runs'
        type: 'boolean'
        required: false
        default: false
env:
  TF_VERSION: 1.12.2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy-ecr:
    uses: ./.github/workflows/deploy-tffolder.yml
    secrets: inherit
    with:
      tf-folder: './terraform-ecr'

  deploy-ddb:
      uses: ./.github/workflows/deploy-tffolder.yml
      secrets: inherit
      with:
        tf-folder: './terraform-ddb'

  deploy-efs:
    uses: ./.github/workflows/deploy-tffolder.yml
    secrets: inherit
    with:
      tf-folder: './terraform-efs'

  deploy-ecs:
    uses: ./.github/workflows/deploy-tffolder.yml
    secrets: inherit
    needs: [deploy-efs, deploy-ecr, build-and-push-image, deploy-ddb]
    with:
      tf-folder: './terraform-ecs'

  build-and-push-image:
    environment: Production
    runs-on: ubuntu-latest
    needs: [deploy-ecr]
    permissions:
      contents: read
      # id-token: write

    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      REPOSITORY: fusion
      ECR_REPO_URI: 471230323408.dkr.ecr.us-west-2.amazonaws.com/fusion

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        id: build_image
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ inputs.build_image }}" == "true" ]]; then
            cd docker  # Remove if Dockerfile is in root
            IMAGE_TAG=${{ github.sha }}
            docker build -t $ECR_REPO_URI:$IMAGE_TAG .
            echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          fi
      - name: Tag Docker Image for ECR
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ inputs.build_image }}" == "true" ]]; then
            docker tag $ECR_REPO_URI:${{ github.sha }}  $ECR_REPO_URI:latest
          fi
      - name: Push Docker Image to ECR
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ inputs.build_image }}" == "true" ]]; then
            docker push $ECR_REPO_URI:${{ github.sha }}
            docker push $ECR_REPO_URI:latest
          fi
         
